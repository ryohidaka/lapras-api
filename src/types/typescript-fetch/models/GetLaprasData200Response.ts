/* tslint:disable */
/* eslint-disable */
/**
 * LAPRAS Public API
 * LAPRAS公開ページAPIの仕様書
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Activity } from './Activity';
import {
    ActivityFromJSON,
    ActivityFromJSONTyped,
    ActivityToJSON,
} from './Activity';
import type { BlogArticle } from './BlogArticle';
import {
    BlogArticleFromJSON,
    BlogArticleFromJSONTyped,
    BlogArticleToJSON,
} from './BlogArticle';
import type { Event } from './Event';
import {
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
} from './Event';
import type { GitHubRepository } from './GitHubRepository';
import {
    GitHubRepositoryFromJSON,
    GitHubRepositoryFromJSONTyped,
    GitHubRepositoryToJSON,
} from './GitHubRepository';
import type { NoteArticle } from './NoteArticle';
import {
    NoteArticleFromJSON,
    NoteArticleFromJSONTyped,
    NoteArticleToJSON,
} from './NoteArticle';
import type { QiitaArticle } from './QiitaArticle';
import {
    QiitaArticleFromJSON,
    QiitaArticleFromJSONTyped,
    QiitaArticleToJSON,
} from './QiitaArticle';
import type { SpeakerDeckSlide } from './SpeakerDeckSlide';
import {
    SpeakerDeckSlideFromJSON,
    SpeakerDeckSlideFromJSONTyped,
    SpeakerDeckSlideToJSON,
} from './SpeakerDeckSlide';
import type { TeratailReply } from './TeratailReply';
import {
    TeratailReplyFromJSON,
    TeratailReplyFromJSONTyped,
    TeratailReplyToJSON,
} from './TeratailReply';
import type { ZennArticle } from './ZennArticle';
import {
    ZennArticleFromJSON,
    ZennArticleFromJSONTyped,
    ZennArticleToJSON,
} from './ZennArticle';

/**
 * 
 * @export
 * @interface GetLaprasData200Response
 */
export interface GetLaprasData200Response {
    /**
     * LAPRAS登録のユーザー名
     * @type {string}
     * @memberof GetLaprasData200Response
     */
    name: string;
    /**
     * LAPRAS登録のユーザー概要
     * @type {string}
     * @memberof GetLaprasData200Response
     */
    description: string;
    /**
     * 技術力スコア
     * @type {string}
     * @memberof GetLaprasData200Response
     */
    eScore: string;
    /**
     * ビジネス力スコア
     * @type {string}
     * @memberof GetLaprasData200Response
     */
    bScore: string;
    /**
     * 影響力スコア
     * @type {string}
     * @memberof GetLaprasData200Response
     */
    iScore: string;
    /**
     * 
     * @type {Array<QiitaArticle>}
     * @memberof GetLaprasData200Response
     */
    qiitaArticles: Array<QiitaArticle>;
    /**
     * 
     * @type {Array<ZennArticle>}
     * @memberof GetLaprasData200Response
     */
    zennArticles: Array<ZennArticle>;
    /**
     * 
     * @type {Array<BlogArticle>}
     * @memberof GetLaprasData200Response
     */
    blogArticles: Array<BlogArticle>;
    /**
     * 
     * @type {Array<NoteArticle>}
     * @memberof GetLaprasData200Response
     */
    noteArticles: Array<NoteArticle>;
    /**
     * 
     * @type {Array<SpeakerDeckSlide>}
     * @memberof GetLaprasData200Response
     */
    speakerDeckSlides: Array<SpeakerDeckSlide>;
    /**
     * 
     * @type {Array<GitHubRepository>}
     * @memberof GetLaprasData200Response
     */
    githubRepositories: Array<GitHubRepository>;
    /**
     * 
     * @type {Array<TeratailReply>}
     * @memberof GetLaprasData200Response
     */
    teratailReplies: Array<TeratailReply>;
    /**
     * 
     * @type {Array<Event>}
     * @memberof GetLaprasData200Response
     */
    events: Array<Event>;
    /**
     * 
     * @type {Array<Activity>}
     * @memberof GetLaprasData200Response
     */
    activities: Array<Activity>;
}

/**
 * Check if a given object implements the GetLaprasData200Response interface.
 */
export function instanceOfGetLaprasData200Response(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "eScore" in value;
    isInstance = isInstance && "bScore" in value;
    isInstance = isInstance && "iScore" in value;
    isInstance = isInstance && "qiitaArticles" in value;
    isInstance = isInstance && "zennArticles" in value;
    isInstance = isInstance && "blogArticles" in value;
    isInstance = isInstance && "noteArticles" in value;
    isInstance = isInstance && "speakerDeckSlides" in value;
    isInstance = isInstance && "githubRepositories" in value;
    isInstance = isInstance && "teratailReplies" in value;
    isInstance = isInstance && "events" in value;
    isInstance = isInstance && "activities" in value;

    return isInstance;
}

export function GetLaprasData200ResponseFromJSON(json: any): GetLaprasData200Response {
    return GetLaprasData200ResponseFromJSONTyped(json, false);
}

export function GetLaprasData200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetLaprasData200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'eScore': json['e_score'],
        'bScore': json['b_score'],
        'iScore': json['i_score'],
        'qiitaArticles': ((json['qiita_articles'] as Array<any>).map(QiitaArticleFromJSON)),
        'zennArticles': ((json['zenn_articles'] as Array<any>).map(ZennArticleFromJSON)),
        'blogArticles': ((json['blog_articles'] as Array<any>).map(BlogArticleFromJSON)),
        'noteArticles': ((json['note_articles'] as Array<any>).map(NoteArticleFromJSON)),
        'speakerDeckSlides': ((json['speaker_deck_slides'] as Array<any>).map(SpeakerDeckSlideFromJSON)),
        'githubRepositories': ((json['github_repositories'] as Array<any>).map(GitHubRepositoryFromJSON)),
        'teratailReplies': ((json['teratail_replies'] as Array<any>).map(TeratailReplyFromJSON)),
        'events': ((json['events'] as Array<any>).map(EventFromJSON)),
        'activities': ((json['activities'] as Array<any>).map(ActivityFromJSON)),
    };
}

export function GetLaprasData200ResponseToJSON(value?: GetLaprasData200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'e_score': value.eScore,
        'b_score': value.bScore,
        'i_score': value.iScore,
        'qiita_articles': ((value.qiitaArticles as Array<any>).map(QiitaArticleToJSON)),
        'zenn_articles': ((value.zennArticles as Array<any>).map(ZennArticleToJSON)),
        'blog_articles': ((value.blogArticles as Array<any>).map(BlogArticleToJSON)),
        'note_articles': ((value.noteArticles as Array<any>).map(NoteArticleToJSON)),
        'speaker_deck_slides': ((value.speakerDeckSlides as Array<any>).map(SpeakerDeckSlideToJSON)),
        'github_repositories': ((value.githubRepositories as Array<any>).map(GitHubRepositoryToJSON)),
        'teratail_replies': ((value.teratailReplies as Array<any>).map(TeratailReplyToJSON)),
        'events': ((value.events as Array<any>).map(EventToJSON)),
        'activities': ((value.activities as Array<any>).map(ActivityToJSON)),
    };
}

