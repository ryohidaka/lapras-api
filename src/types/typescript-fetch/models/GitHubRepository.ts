/* tslint:disable */
/* eslint-disable */
/**
 * LAPRAS Public API
 * LAPRAS公開ページAPIの仕様書
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GitHubRepositoryLanguagesInner } from './GitHubRepositoryLanguagesInner';
import {
    GitHubRepositoryLanguagesInnerFromJSON,
    GitHubRepositoryLanguagesInnerFromJSONTyped,
    GitHubRepositoryLanguagesInnerToJSON,
} from './GitHubRepositoryLanguagesInner';

/**
 * GitHubリポジトリ
 * @export
 * @interface GitHubRepository
 */
export interface GitHubRepository {
    /**
     * 
     * @type {number}
     * @memberof GitHubRepository
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof GitHubRepository
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof GitHubRepository
     */
    url: string;
    /**
     * 
     * @type {boolean}
     * @memberof GitHubRepository
     */
    isOss: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GitHubRepository
     */
    isFork: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GitHubRepository
     */
    isOwner: boolean;
    /**
     * 
     * @type {string}
     * @memberof GitHubRepository
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof GitHubRepository
     */
    stargazersCount: number;
    /**
     * 
     * @type {string}
     * @memberof GitHubRepository
     */
    stargazersUrl: string;
    /**
     * 
     * @type {number}
     * @memberof GitHubRepository
     */
    forks: number;
    /**
     * 
     * @type {number}
     * @memberof GitHubRepository
     */
    contributorsCount: number;
    /**
     * 
     * @type {string}
     * @memberof GitHubRepository
     */
    contributorsUrl: string;
    /**
     * 
     * @type {number}
     * @memberof GitHubRepository
     */
    contributions: number;
    /**
     * 
     * @type {string}
     * @memberof GitHubRepository
     */
    contributionsUrl: string;
    /**
     * 
     * @type {string}
     * @memberof GitHubRepository
     */
    language: string;
    /**
     * 
     * @type {Array<GitHubRepositoryLanguagesInner>}
     * @memberof GitHubRepository
     */
    languages: Array<GitHubRepositoryLanguagesInner>;
}

/**
 * Check if a given object implements the GitHubRepository interface.
 */
export function instanceOfGitHubRepository(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "isOss" in value;
    isInstance = isInstance && "isFork" in value;
    isInstance = isInstance && "isOwner" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "stargazersCount" in value;
    isInstance = isInstance && "stargazersUrl" in value;
    isInstance = isInstance && "forks" in value;
    isInstance = isInstance && "contributorsCount" in value;
    isInstance = isInstance && "contributorsUrl" in value;
    isInstance = isInstance && "contributions" in value;
    isInstance = isInstance && "contributionsUrl" in value;
    isInstance = isInstance && "language" in value;
    isInstance = isInstance && "languages" in value;

    return isInstance;
}

export function GitHubRepositoryFromJSON(json: any): GitHubRepository {
    return GitHubRepositoryFromJSONTyped(json, false);
}

export function GitHubRepositoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): GitHubRepository {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'url': json['url'],
        'isOss': json['is_oss'],
        'isFork': json['is_fork'],
        'isOwner': json['is_owner'],
        'description': json['description'],
        'stargazersCount': json['stargazers_count'],
        'stargazersUrl': json['stargazers_url'],
        'forks': json['forks'],
        'contributorsCount': json['contributors_count'],
        'contributorsUrl': json['contributors_url'],
        'contributions': json['contributions'],
        'contributionsUrl': json['contributions_url'],
        'language': json['language'],
        'languages': ((json['languages'] as Array<any>).map(GitHubRepositoryLanguagesInnerFromJSON)),
    };
}

export function GitHubRepositoryToJSON(value?: GitHubRepository | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'url': value.url,
        'is_oss': value.isOss,
        'is_fork': value.isFork,
        'is_owner': value.isOwner,
        'description': value.description,
        'stargazers_count': value.stargazersCount,
        'stargazers_url': value.stargazersUrl,
        'forks': value.forks,
        'contributors_count': value.contributorsCount,
        'contributors_url': value.contributorsUrl,
        'contributions': value.contributions,
        'contributions_url': value.contributionsUrl,
        'language': value.language,
        'languages': ((value.languages as Array<any>).map(GitHubRepositoryLanguagesInnerToJSON)),
    };
}

